# Darts 301

# Helpers.

pop = function(list, index)
{
	new = []
	for i from 0 till len(list)
		if i != index
			new = new + [list[i]]
	return new
}

find = function(list, value)
{
	for i from 0 till len(list)
		if list[i] == value
			return i
	return Void
}

widest = function(list)
{
	max = 0
	for element in list {
		this = len(str(element))
		if this > max
			max = this
	}
	return max
}

sum = function(expression)
{
	replacements = [ [" ", "+"], [",", "+"], [";", "+"], ["x", "*"] ]
	for replacement in replacements
		expression = replace(replacement[0], replacement[1], expression)
	result = eval(expression) cover "EVAL_ERROR" ?? 0
	return result == "EVAL_ERROR" ? Void : result
}

reevaluate_turn = function()
{
	players = len(names)
	next = 0
	for i from turn till 2 * players
		if scores[i % players] != 0 {
			next = i % players
			break
		}
	global turn = next
}

# Commands.

commands = [
	[
		"stake", "Set starting stake",
		function(amount) {
			new = sum(amount)
			if new != Void
				global stake = new
		}
	],
	[
		"add", "Add player",
		function(name) {
			global names = names + [name]
			global scores = scores + [stake]
			global plays = plays + [""]
		}
	],
	[
		"kick", "Remove player",
		function(name) {
			index = find(names, name)
			global names = pop(names, index)
			global scores = pop(scores, index)
			global plays = pop(plays, index)
		}
	],
	[
		"reset", "Reset all scores",
		function(discard) {
			for i from 0 till len(scores) {
				global scores[i] = stake
				global plays[i] = ""
			}
		}
	],
	[
		"fix", "Fix score",
		function(name_and_score) {
			separation = Void
			for i from 0 till len(name_and_score)
				if name_and_score[i] == " "
					separation = i
			if separation == Void {
				name = names[turn]
				score = name_and_score
			} else {
				name = substr(name_and_score, separation+1, len(name_and_score))
				score = substr(name_and_score, 0, separation)
			}
			new = sum(score)
			if new != Void {
				index = find(names, name)
				if index != Void
					global scores[index] = new
			}
		}
	],
	[
		"?", "Toggle this board",
		function(discard) {
			global show_help = !show_help
		}
	]
]

# Setup.

colors = [
	[00, ["1f", "1c", "1b"]], # Background.
	[10, ["00", "e6", "41"]], # Player: Active.
	[02, ["8a", "7f", "7c"]], # Player: Idle.
	[11, ["f0", "c6", "1d"]], # Player: Winner.
	[15, ["ff", "ff", "ff"]], # Score.
	[13, ["00", "e6", "41"]], # Prompt.
	[05, ["8a", "7f", "7c"]], # Prompt, recent.
	[08, ["5f", "57", "54"]], # Stake.
	[04, ["12", "10", "10"]], # Commands board background.
	[12, ["5e", "55", "52"]], # Commands board text.
]
for color in colors
	put("\e]4;{color[0]};rgb:{join(color[1], "/")}\a")

command_names = []
command_descriptions = []
for command in commands {
	command_names = command_names + [command[0]]
	command_descriptions = command_descriptions + [command[1]]
}
widest_command_name = widest(command_names)
widest_command_description = widest(command_descriptions)

stake = 301
names = []
scores = []
plays = []
turn = 0
show_help = True

while True {
	buffer = "\e[H\e[?12l\e[40m\e[K\n"
	buffer = buffer + "\e[K  \e[90mDARTS {stake}\n\e[K\n"
	stop_1 = 3 + widest(names) + 3
	stop_2 = stop_1 + widest(scores) + 3
	if !len(names)
		buffer = buffer + "\e[K  \e7\n"
	else
		for i from 0 till len(names) {
			buffer = buffer + "\e[K  "
			if scores[i] == 0
				buffer = buffer + "\e[93m\e[9m"
			elif i == turn
				buffer = buffer + "\e[92m\e[1m"
			else
				buffer = buffer + "\e[32m"
			buffer = buffer + names[i] + "\e[{stop_1}G\e[29m\e[22m\e[97m{i == turn ? "\e[5m" : ""}{scores[i]}\e[25m"
			if i == turn
				buffer = buffer + "\e[{stop_2}G\e7"
			elif plays[i]
				buffer = buffer + "\e[{stop_2}G  \e[35m{plays[i]} / {sum(plays[i])}"
			buffer = buffer + "\n"
		}
	if show_help {
		stop_1 = 6 + widest_command_name + 3
		stop_2 = stop_1 + widest_command_description + 3
		buffer = buffer + "\e[K\n\e[K  \e[44m\e[94m\e[K\e[{stop_2}G\e[40m\e[K\n"
		for command in commands
			buffer = buffer + "\e[K  \e[44m\e[K   {command[0]}\e[{stop_1}G\e[3m{command[1]}\e[23m\e[{stop_2}G\e[40m\e[K\n"
		buffer = buffer + "\e[K  \e[44m\e[K\e[{stop_2}G\e[40m\e[K\n"
	}
	buffer = buffer + "\e[J\e[H"
	print(buffer)
	
	# Get request.
	request = input("\e8\e[95m\e[?25h> ")
	put("\e[?25l")
	
	# Process request.
	command_function = Void
	argument = Void
	for command in commands
		if substr(request, 0, len(command[0])) == command[0] {
			command_function = command[2]
			argument = substr(request, len(command[0])+1, len(request))
			break
		}
	
	# Execute request or log points and advance turn.
	if command_function {
		command_function(argument)
	} elif len(names) > 0 {
		points = sum(request)
		if points == Void
			continue
		score = scores[turn] - points
		if score >= 0 {
			scores[turn] = score
			plays[turn] = request
		}
		global turn = turn + 1
	}
	reevaluate_turn()
}
