--------- Lexing ---------


Tokens STORE:
- Strings
- Identifiers


--------- Parsing ---------


Nodes REFERENCE tokens':
- Strings
- Identifiers (the tokens ALWAYS contain all variable and function names, parameters, etc.)

Nodes STORE:
- Lists, which reference nodes' WCS, which in turn reference tokens' WCS.


--------- Interpretation ---------

The general rule is that no value used during interpretation should be stored anywhere outside
the interpretation.
The reasoning for this is to potentially (although the language doesn't support
it at the moment) allow including/importing other files DURING a files interpretation.
If this were to happen, the included file would be lexed, parsed, interpreted, and
cleaned up after BEFORE the main program resumes. This would mean that, should we want a
feature that allows importing function definitions, if the symbol table used tokens' WCS
for the function names etc., these pointers would be freed as soon as the imported
file concludes.


When a LITERAL value is ENCOUNTERED in a node, it is DUPLICATED into a return value:
- Literal Strings and Lists are duplicated as part of returning them.
- Identifiers (variable and function names and parameters) are duplicated as part of
  adding them to the symbol table.

When a value is PASSED ON, it references other return values' WCS.

When variable or function CONTENT is RETRIEVED from a symbol table, it is COPIED.
This memory is freed as part of freeing the return values.

When a new value is CREATED, it:
- ALLOCATES NEW MEMORY for the new value
- FREES OLD MEMORY from the source objects

Variable names or function names and parameters COPY their WCS.


--------- Cleaning ---------


1) Free return value

2) Free symbol table

3) Free nodes WITHOUT freeing tokens' WCS

4) Free tokens